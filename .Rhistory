?shQuote
construct_payload_file_from_manifest = function(manifest_file_name)
{
x=read.table(manifest_file_name,header = T)
#x = x[1:5,]
manifest_length= nrow(x)
id= toString(sprintf('"%s"', x$id))
paste0("\"",x$id[1],"\"" )
#xid = paste(x$id, collapse = ",")
Part1= '{"filters":{"op":"in","content":{"field":"files.file_id","value":[ '
Part2= '] }},"format":"TSV","fields":"file_id,file_name,cases.submitter_id,cases.case_id,data_category,data_type,cases.samples.tumor_descriptor,cases.samples.tissue_type,cases.samples.sample_type,cases.samples.submitter_id,cases.samples.sample_id,cases.samples.portions.analytes.aliquots.aliquot_id,cases.samples.portions.analytes.aliquots.submitter_id","size":'
#Part3= paste(shQuote(manifest_length),"}",sep="")
Part3= paste0("\"",manifest_length, "\"", "}")
Sentence= paste(Part1,id,Part2,Part3, collapse=" ")
write.table(Sentence,"Payload.txt",quote=F,col.names=F,row.names=F)
}
?all
?any
?normalize.quantiles.robust
?quantile
?cbind
log2(0.5)
?as.matrix
?legend
?heatmap.2
?heatmap.2
setwd("/Users/ginny/Google Drive/Thyroid_201808_R")
d = read.delim("Human_Thyroid_genes_TPM_consolidated_output.txt", header=T, as.is=T)
tmp = d[,-c(1:3)]
tmp[tmp == 0] = NA
### Requirement -- no missing data at all
uid = apply(tmp, 1, function(x) all(!is.na(x)))
d = d[uid, ]
tmp = tmp[uid, ]
### Use average FPKM values >= 1
avg = apply(tmp, 1, mean)
uid = avg >= 1
d = d[uid, ]
tmp = tmp[uid, ]
tmp = log2(tmp + 0.5)
setwd("/Users/ginny/Google Drive/HW_differentialExpression")
d = read.delim("Human_Thyroid_genes_TPM_consolidated_output.txt", header=T, as.is=T)
tmp = d[,-c(1:3)]
tmp[tmp == 0] = NA
### Requirement -- no missing data at all
uid = apply(tmp, 1, function(x) all(!is.na(x)))
d = d[uid, ]
tmp = tmp[uid, ]
### Use average FPKM values >= 1
avg = apply(tmp, 1, mean)
uid = avg >= 1
d = d[uid, ]
tmp = tmp[uid, ]
tmp = log2(tmp + 0.5)
library(preprocessCore)
tmp2 = normalize.quantiles.robust(as.matrix(tmp))
colnames(tmp2) = c("N1","T1", "N3","T3", "N4","T4", "N6","T6", "N7","T7", "N8","T8")
pdf("normalized_data_density_plot.pdf", height=5.5, width=5)
plot(density(tmp2[,1], adjust=0.5), ylim=c(0,0.2), main="Distribution of log2 intensities")
for(j in 2:ncol(tmp2)) {
lines(density(tmp2[,j], adjust=0.5), col=j)
}
dev.off()
dim(tmp2)
View(total_average_saving)
library(qdapRegex)
install.packages("qdapRegex")
library(qdapRegex)
?rm_between
x <- "<i>the text I need to extract</i></b></a></div>"
rm_between(x, "<i>", "</i>", extract=FALSE)
it = "missense_variant,SAMD11,MISSENSE,NM_152486.2:p.His78Tyr/c.232C>T,Cac/Tac,MODERATE,,0.052516,0.1389,rs9988179,\"0.004,0.006,0.001,.,.,.,.,.,.,.,.(D,D,D,.,.,.,.,.,.,.,.)\",0.637(P),2.36(M),-1.0840(T),,chr1,865694,865694,C,T,het,missense_variant(MODERATE|MISSENSE|Cac/Tac|p.His78Tyr/c.232C>T|681|SAMD11|protein_coding|CODING|NM_152486.2|3|T),\"K562:H3K27me3,NHEK:H3K27me3,H1ESC:H3K27me3,H1ESC:DNase1,HepG2:H3K27me3\",,,,0.0245,0.0965,0.002,0.01,0.02,0.00,,0.006184(N),0.590724(P),,0.0008(T),\"0.146,0.206,0.196,0.202,0.111,0.146\",2.788769,4.72,4.72,0.787000,3.747000,0.002000,0.081000,17.0604"
it
rm_between(it, "\"", "\"", extract=FALSE)
```{r}
setwd("/Users/ginny/Google Drive/Thyroid_201808_R")
d = read.delim("Human_Thyroid_genes_TPM_consolidated_output.txt", header=T, as.is=T)
tmp = d[,-c(1:3)]
tmp[tmp == 0] = NA
### Requirement -- no missing data at all
uid = apply(tmp, 1, function(x) all(!is.na(x)))
d = d[uid, ]
tmp = tmp[uid, ]
### Use average FPKM values >= 1
avg = apply(tmp, 1, mean)
uid = avg >= 1
d = d[uid, ]
tmp = tmp[uid, ]
tmp = log2(tmp + 0.5)
### Normalization: boxplot and density plot
pdf("boxplot.pdf", width=8, height=4.5)
boxplot(tmp, las=2, mar=c(10,5,3,2))
dev.off()
pdf("raw_data_density_plot.pdf", height=5.5, width=5)
plot(density(tmp[,1], adjust=0.5), ylim=c(0,0.2), main="Distribution of log2 intensities")
for(j in 2:ncol(tmp)) {
lines(density(tmp[,j], adjust=0.5), col=j)
}
dev.off()
library(preprocessCore)
tmp2 = normalize.quantiles.robust(as.matrix(tmp))
colnames(tmp2) = c("N1","T1", "N3","T3", "N4","T4", "N6","T6", "N7","T7", "N8","T8")
pdf("normalized_data_density_plot.pdf", height=5.5, width=5)
plot(density(tmp2[,1], adjust=0.5), ylim=c(0,0.2), main="Distribution of log2 intensities")
for(j in 2:ncol(tmp2)) {
lines(density(tmp2[,j], adjust=0.5), col=j)
}
dev.off()
tmp.pca = prcomp(t(tmp2))
vv = tmp.pca$sdev^2
vv = vv / sum(vv) * 100
vv = round(vv, 2)
nsample = ncol(tmp2)
sg = rep(1, nsample)
sg[c(2,4,6,8,10,12)] = 2
vv
tmp.pca
dim(tmp2)
log2(1.5)
4000*5„ÄÅ3600
4000*5/3600
??Multinomial
chr_name = c(seq(1:22),"X","Y")
chr_name
300*1024/2.7
300*1024/2.7/60
300*1024/2.7/60/60
?qvalue
??qvalue
?as.numeric
?heatmap.2
??heatmap.2
cn_cat = c(1,2)
cn = c(paste("t",cn_cat,"rr",sep = "_"), (paste("t",cn_cat,"p",sep = "_"))
)
cn = c(paste("t",cn_cat,"rr",sep = "_"), paste("t",cn_cat,"p",sep = "_"))
cn
cn_cat = 1
cn = c(paste("t",cn_cat,"rr",sep = "_"), paste("t",cn_cat,"p",sep = "_"))
cn
?vector
heat_list = vector(mode = "list", 2)
heat_list
heat_list[[1]] = c("a,b")
heat_list[[2]] = matrix(0,5,5)
heat_list
rr_matrix = matrix(0, nrow = length(sel_col), ncol = 2*(length(cat_names)-1))
a = c(1,3,4,5)
b = c(2,4,1,5)
a*b
kit = matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
kit
t(kit)
?fread
??fread
0.8*3300
?grep
a = c(1,2,3,4)
b = c(5,6,7,8)
a
ba
b
m = cbind(a,b)
m
as.vector(m)
c(m)
as.vector(t(m))
i = c("1/1","0/1","0/0","./.")
i = c("1/1","0/1","0/0","./.","0/2","1/2")
grep("1|2",i)
grep("1|2",i,invert = T)
grep("1|2|.",i,invert = T)
grep("1|2|\\.",i,invert = T)
20*30+10*15
155*5/750
10*10*2
23/200
5*30*8
31-24
8/31*3300
8/30*3300
as.numeric()
?as.numeric
?as.factor
qvalue
qvalue()
?qvalue()
a = c(1,4,1)
b = c(2,4,1)
a+b
?heatmap.2
??heatmap.2
?jitter
??heatmap.2
-log10(1)
-log10(0.1)
-log10(0.01)
-log10(0.05)
?pdf
?fread()
??fread()
403685-398239
1/0.715
1/0.28
5123/3
testv = c(0,0,0)
testv
lapply(1:3, function(x){})
lapply(1:3, function(x){testv[x] = 3})
it = lapply(1:3, function(x){testv[x] = 3})
it
testv
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/ginny/Google Drive/R_GPD/")
create("GPD")
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/")
install("GPD")
library(GPD)
??germline_extraction_annotation_pos
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/")
install("GPD")
install_github('GPD','ginnyintifa')
install_github('GPD','ginnyintifa')
library(GPD)
??germline_extraction_annotation_pos
seq(211:22)
c(seq(21:22))
chr_name = c(21,22),
chr_name = c(21,22)
chr_name
45/2000
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/")
install("GPD")
??multivariate_cox_model_with_interaction
it = matrix(0,3,3)
it[1,1]
it[1+1,1]
it = matrix(0,3,3)
it[1+1,1] = 4
it
a = 1
it[a+1,1] = 4
it
it[a+2,1] = 4
it
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/")
install("GPD")
log2(12)
?grep
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/")
install("GPD")
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/GPD")
document()
setwd("/Users/ginny/Google Drive/R_GPD/")
install("GPD")
plot()
?plot()
?text()
?corr
?cor
?rect()
?chisq.test
?Chisquare
dnorm(1)
pnorm(1)
pnorm(0)
?Chisquare
pchisq(10,2)
a = c(1,4,2,3)
b = log(a)
b
?boxplot
?mad
?glm
plot()
plot(0,0)
?boxplot
a = rnorm(100)
b = c(rep(3,20),rep(2,40),rep(1,40))
boxplot(a~b)
?mad
library(data.table)
library(dplyr)
library(magrittr)
brca_domain_df = fread("/Users/ginny/Google Drive/R_GPD/somatic_domain_survival_info.tsv", stringsAsFactors = F)
brca_domain_df[1,1:10]
brca_domain_df[1,1:15]
brca_domain_df[1,1:16]
unit_names = colnames(brca_domain_df)[-c(1:15)]
unit_names[1,10]
unit_names[1:10]
length(unit_names)
unit_names[1824]
x = 1
sepa = unlist(strsplit(unit_names[x], split = "_"))
sepq
sepa
domain_idx = c(4:(s_l-2))
s_l = length(sepa)
domain_idx = c(4:(s_l-2))
domain_idx
domain_name = paste(sepa[domain_idx], collapse = "_")
domain_name
this_new = paste(sepa[c(1:3)], domain_name, sepa[s_l-1], sepa[s_l], collapse = "__")
this_new
sepa[c(1:3)]
this_new = paste(sepa[1],sepa[2],sepa[3], domain_name, sepa[s_l-1], sepa[s_l], collapse = "__")
this_new
this_new = paste(sepa[1],sepa[2],sepa[3], domain_name, sepa[s_l-1], sepa[s_l], sep = "__")
this_new
domain_name = paste(sepa[domain_idx], sep = "_")
domain_name
new_names = unlist(lapply(1:length(unit_names), function(x){
sepa = unlist(strsplit(unit_names[x], split = "_"))
s_l = length(sepa)
domain_idx = c(4:(s_l-2))
domain_name = paste(sepa[domain_idx], sep = "_")
this_new = paste(sepa[1],sepa[2],sepa[3], domain_name, sepa[s_l-1], sepa[s_l], sep = "__")
return(this_new)
}))
new_names[1]
new_names[2]
unit_names[15]
new_names[15]
unit_names[1:3]
new_names[1:3]
unit_names[4:10]
new_names[4:10]
new_names = unlist(lapply(1:length(unit_names), function(x){
sepa = unlist(strsplit(unit_names[x], split = "_"))
s_l = length(sepa)
domain_idx = c(4:(s_l-2))
domain_name = paste(sepa[domain_idx], collapse  = "_")
this_new = paste(sepa[1],sepa[2],sepa[3], domain_name, sepa[s_l-1], sepa[s_l], sep = "__")
return(this_new)
}))
new_names[15]
col_names[15]
unit_names[15]
unit_names[25]
new_names[25]
colnames(brca_domain_df) = c(colnames(brca_domain_df)[1:15], new_names)
write.table(brca_domain_df, "/Users/ginny/Google Drive/R_GPD/somatic_domain_survival_info_brca_col.tsv",
sep = "\t", row.names = F, quote = F)
?table
?heatmap.2
??heatmap.2
log(0.035)
?sweep
?pdf
??heatmap.2
?replace
0.36*0.36
0.36*0.36*0.1296
73/(73+231)
75/312
?replace
stripchart()
?stripchart()
?stripchart()
?boxplot
library(dplyr)
3*33
99/11000
2*33/11000
plot(xlim = c(-6,0), ylim = c(-6,0))
plot(0,0,xlim = c(-6,0), ylim = c(-6,0))
plot(0,0, col = "#fb807200", xlim = c(-6,0), ylim = c(-6,0))
?legend
c(6,c(17:33))
?pdf
2^12
log(2)
e
exp
e
log(0.5)
log(0.005)
log(0.05)
log(2)
log(3)
log(0.5)
log(1.5)
log2(1.5)
log2(0.5)
log2(0.1)
log2(1.1)
log2(1.10)
log2(1.010)
log2(0.01)
log2(1.01)
??vioplot
?hist
3300*`2`
3300*12
?boxplot
it = c(0,0,0,1,1,1,1)
median(it)
it = c(0,0,0,0,1,1,1,1)
median(it)
?binom()
?binomial()
?Binomial
rbinom(10,10,0.3)
rbinom(10,1,0.3)
runif(10, min = 0, max = 100)
runif(10, min = 0, max = 1)
runif(10, min = 0, max = 0.5)
?runif
?print
?Chisquare
pchisq(15.3, df = 1)
pchisq(15.3, df = 1,lower.tail = F)
?which.max
k = c(1,2,3,3)
which.max(k)
k = c(1,2,0,3,3)
which.max(k)
?heatmap.2
??heatmap.2
?sum
?boxplot
?mean
wilcox.test(c(1,3,2,4,56,3),c(6,3,45,62,1))
it = wilcox.test(c(1,3,2,4,56,3),c(6,3,45,62,1))
it$statistics
it
it$p.value
?sweep
A <- array(1:24, dim = 4:2)
A
sweep(A, 1, 5)
s_feature_matrix = sweep(feature_matrix, 2, apply(feature_matrix, 2,median))
feature_matrix = A[[1]]
feature_matrix
A = array(1:24, dim = 4:6)
A
A  = matrix(1:12, 3,4)
A
feature_matrix = A
s_feature_matrix = sweep(feature_matrix, 2, apply(feature_matrix, 2,median))
s_feature_matrix
?median
ai = c(1,2,3,42,36,3,1,2,22,33)
ai
quantile(ai)
q = quantile(ai)
q
q[1]
q[2]
q[4]
?quantile
quantile(ai)[4]
?mfrow
?barplot
table()
?table()
?barplot
install.packages("DirichletReg")
library(DirichletReg)
install.packages("rgl")
library(rgl)
it = c(1,2)
rep(it, 5)
it
it = matrix(c(1:8),2,4)
it
it[1,3] = NA
rowMeans(it)
it
rowMeans(it, na.rm = T)
214/579
29/579
setwd("/Users/ginny/Google Drive/R_GPD/GPD_package_0401/GPD")
document()
library("devtools")
library(roxygen2)
setwd("/Users/ginny/Google Drive/R_GPD/GPD_package_0401/GPD")
document()
library("devtools")
devtools::install_github("ginnyintifa/GPD")
extraction_annotation_pos
sel_example_mutation[1,]
extraction_annotation_pos(mutation_df = sel_example_mutation,
cancer_type = "example",
cancer_barcode = unique(sel_example_mutation$Tumor_Sample_Barcode),
output_dir = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/try/")
extraction_annotation_pos(mutation_df = sel_example_mutation,
cancer_type = "example",
cancer_barcode = unique(sel_example_mutation$Tumor_Sample_Barcode),
output_dir = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/try")
