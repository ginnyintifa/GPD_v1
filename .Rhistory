seq_id[[i]]= c(phos_id[i]+1,phos_id[i+1]-1)
}
seq_id = rep(list(c()),length(phos_id))
for (i in 1:(length(seq_id)-1))
{
seq_id[[i]]= c(phos_id_ind[i]+1,phos_id_ind[i+1]-1)
}
seq_id[[length(seq_id)]] = c(phos_id_ind[length(seq_id)]+1,length(phospho_fasta))
seq_id
seq_id = rep(list(c()),length(phos_id))
for (i in 1:(length(seq_id)-1))
{
seq_id[[i]]= c(phos_id_ind[i]+1:phos_id_ind[i+1]-1)
}
seq_id = rep(list(c()),length(phos_id))
for (i in 1:(length(seq_id)-1))
{
seq_id[[i]]= c((phos_id_ind[i]+1):(phos_id_ind[i+1]-1))
}
seq_id[[length(seq_id)]] = c((phos_id_ind[length(seq_id)]+1):length(phospho_fasta))
seq_id
phospho_fasta[135889]
phospho_fasta[135890]
phospho_fasta[135891]
phospho_fasta[135892]
phospho_fasta[135893]
phospho_fasta[135894]
seq = rep("", length(phos_id))
seq
seq = sapply(1:length(phos_id), function(x) paste0(phospho_fasta[seq_id[[x]]]))
seq
seq[1]
seq[2]
length(seq)
seq[1:2]
x=1
phospho_fasta[seq_id[[x]]]
paste0(phospho_fasta[seq_id[[x]]])
paste0(phospho_fasta[seq_id[[x]]],collapse = "")
seq = unlist(sapply(1:length(phos_id), function(x)
paste0(phospho_fasta[seq_id[[x]]],collapse = "")))
seq
seq[1]
View(data_ptm)
library(data.table)
library(magrittr)
library(dplyr)
logitit = function(p1){return(log(p1/(1-p1)))}
logitit(rnorm(10000))
tt = matrix(abs(rnorm(10000000,50)), nrow = 10000000, ncol = 50)
tt[which(tt>0.999)]=0.999
tt[which(tt<0.001)]=0.001
dim(tt)
stt = matrix(abs(rnorm(1000,50)), nrow = 1000, ncol = 50)
stt[which(tt>0.999)]=0.999
stt[which(tt<0.001)]=0.001
stt = matrix(abs(rnorm(1000,50)), nrow = 1000, ncol = 50)
stt[which(stt>0.999)]=0.999
stt[which(stt<0.001)]=0.001
dim(stt)
vstt = as.vector(stt)
length(vstt)
logitit = function(p1){return(log(p1/(1-p1)))}
vstt[1]
vstt[2]
vstt[3]
stt = matrix(abs(rnorm(1000,50)), nrow = 1000, ncol = 50)
stt
stt = matrix(abs(rnorm(1000*50)), nrow = 1000, ncol = 50)
stt[which(stt>0.999)]=0.999
stt[which(stt<0.001)]=0.001
stt[1]
stt[1,1]
stt[1,2]
vstt = as.vector(stt)
vstt[1]
ptm = proc.time()
logitit(vstt)
proc.time()-ptm
ptm = proc.time()
vit = logitit(vstt)
proc.time()-ptm
ptm = proc.time()
sit = apply(stt, c(1,2), logitit)
proc.time()-ptm
stt = matrix(abs(rnorm(10000*50)), nrow = 10000, ncol = 50)
stt[which(stt>0.999)]=0.999
stt[which(stt<0.001)]=0.001
ptm = proc.time()
vstt = as.vector(stt)
vit = logitit(vstt)
proc.time()-ptm
ptm = proc.time()
sit = apply(stt, c(1,2), logitit)
proc.time()-ptm
stt = matrix(abs(rnorm(100000*50)), nrow = 100000, ncol = 50)
stt[which(stt>0.999)]=0.999
stt[which(stt<0.001)]=0.001
dim(stt)
ptm = proc.time()
vstt = as.vector(stt)
vit = logitit(vstt)
proc.time()-ptm
ptm = proc.time()
sit = apply(stt, c(1,2), logitit)
proc.time()-ptm
ptm = proc.time()
msit = logitit(stt)
proc.time()-ptm
stt[1,]
msit[1,]
sit[1,]
ptm = proc.time()
vstt = as.vector(stt)
vit = logitit(vstt)
proc.time()-ptm
ptm = proc.time()
msit = logitit(stt)
proc.time()-ptm
stt = matrix(abs(rnorm(1000000*50)), nrow = 1000000, ncol = 50)
stt[which(stt>0.999)]=0.999
stt[which(stt<0.001)]=0.001
dim(stt)
ptm = proc.time()
vstt = as.vector(stt)
vit = logitit(vstt)
proc.time()-ptm
ptm = proc.time()
msit = logitit(stt)
proc.time()-ptm
library(microbenchmark)
library(microbenchmark); library(plyr)
op <- microbenchmark(
PLYR=ddply(mtcars, .(cyl, gear), summarise,
output = mean(hp)),
AGGR=aggregate(hp ~ cyl + gear, mtcars, mean),
TAPPLY = tapply(mtcars$hp, interaction(mtcars$cyl,
mtcars$gear), mean),
times=1000L)
op <- microbenchmark(
with_vector =logitit(vstt),
with_matrix = logitit(stt),
times=1000L)
op <- microbenchmark(
with_vector =logitit(vstt),
with_matrix = logitit(stt),
times=10)
op
a = matrix(c(1:8), 2,4)
a
a[1,4] = matrix(c(1:4),2,2)
a[,c(1,4)] = matrix(c(1:4),2,2)
a
decoy_feature = readRDS("ps_pred_noc_not_na_decoy_feature.Rds")
nrow_decoy = nrow(decoy_feature)
rm(decoy_feature)
seq  = "sdafdfdfs"
library(stringr)
wind = "GHVQVVTLLVNRKCQIDVCDKENRT"
wind_vec = unlist(strsplit(wind, sep = ""))
wind_vec = unlist(strsplit(wind, split  = ""))
wind_vec
wind_vec_noc = wind_vec[-13]
wind_vec_noc
table(wind_vec_noc)
wind_vec[13]
flank_size = 12
dwc = "dafddddqwwewweqewreeqeheqrqehqwewewwssxcdfghtyrew"
nchar(dwc)
library(stringr)
decoy_windows_clear = dwc
decoy_windows = str_sub(decoy_windows_clear, flank_size+1, flank_size+1+2*flank_size)
decoy_windows
nchar(decoy_windows)
a = c(1,2,3,4,5)
b = c(2,4)
a-b
b = 1
b-a
all_decoy_pos = c(1,3,4,5,6,3,5)
all_psp_pos = c(2,3)
it =  sapply(1:length(all_decoy_pos), function(x)
{
return(abs(all_decoy_pos[x]-all_psp_pos))
})
it
all_decoy_pos = c(23,46,78,34,56)
all_psp_pos = c(13,66)
it =  sapply(1:length(all_decoy_pos), function(x)
{
return(abs(all_decoy_pos[x]-all_psp_pos)>flank_size)
})
choice = apply(it, 2, sum)
keep_which = which(choice ==0)
keep_which
choice
it
it =  sapply(1:length(all_decoy_pos), function(x)
{
return(abs(all_decoy_pos[x]-all_psp_pos)<flank_size)
})
choice = apply(it, 2, sum)
keep_which = which(choice ==0)
keep_which
keep = data.frame(prot = integer(0), protID = character(0), pos = integer(0),
window = character(0), label = character(0), stringsAsFactors = F)
keep
as.matrix()
?as.matrix()
all_decoy_pos = c(2)
all_psp_pos = c(2,3)
it =  sapply(1:length(all_decoy_pos), function(x)
{
return(abs(all_decoy_pos[x]-all_psp_pos)<flank_size)
})
it
all_psp_pos = c(3)
it =  sapply(1:length(all_decoy_pos), function(x)
{
return(abs(all_decoy_pos[x]-all_psp_pos)<flank_size)
})
it
all_psp_pos = c(3,4)
all_decoy_pos
all_decoy_pos = c(3,4,56,2)
it =  lapply(1:length(all_decoy_pos), function(x)
{
return(abs(all_decoy_pos[x]-all_psp_pos)<flank_size)
})
it
matrix_it = matrix(0,1,1)
matrix_it
shiny::runApp('not_work/try_shiny')
hist(rnorm(100), col = "red")
hist(rnorm(100), col = "blue", add = T)
hist(rnorm(100), col = "yellow", add = T)
library(ROCR)
performance()
performance()
?performance()
.libPaths()
performance
performance
download.packages(pkgs = "ROCR", destdor = ".", type = "source")
download.packages(pkgs = "ROCR", destdir = ".", type = "source")
untar(download.packages(pkgs = "ROCR", destdir = ".", type = "source")[,2])
getwd()
ai = c(24315,234,2,0)
isz <- ai == 0
isz
sum(is)
sum(isz)
calculate_MCC = function(tp, fp, fn, tn)
{
#fenzi nominator
nominator = tp*tn-fp*fn
real_p = tp+fp
pred_p = tp+fn
real_n = tn+fn
pred_n = tn+fn
c_pr = c(real_p, pred_p, real_n, pred_n)
isZero <- c_pr == 0
if(sum(isZero)==0)
{
p1 = 1/sqrt(tp+fn)
p2 = 1/sqrt(tp+fp)
p3 = 1/sqrt(tn+fp)
p4 = 1/sqrt(tn+fn)
MCC = nominator*p1*p2*p3*p4
}else
{
MCC = 0
}
return(MCC)
}
cm = calculate_MCC(7916,0,0,511844)
cm
7916*511844
79166*511844
79166*5118440
791660*5118440
2*10^9
ai = c(12,3,4,6)
bi =  c(0,0,1,1)
sum(ai>5&bi==0)
sum(ai>2&bi==0)
density(rnorm(100))
it = density(rnorm(100))
it
it$y
runApp('not_work/MyWiki')
paste("1st", "2nd", "3rd", collapse = ", ") # probably not what you wanted
paste("1st", "2nd", "3rd", sep = ", ")
167*60
166*60
944204/60
15736*60
749*3
46*60
749*3
7005-69091
70005-69091
1041-124
?substr
?structure
x <- structure(c(5,2),names=c("a","b")) ## "dictionary"
x
dim(x)
typeof(x)
str(x)
triplet_dic = structure(c("UUU","UUC", "UUA", "UUG"),
names = c("F","F","L","L"))
triplet_dic
triplet_dic[F]
triplet_dic["UUC"]
triplet_dic["UUU"]
triplet_dic[F]
triplet_dic["F"]
triplet_dic["F"]
triplet_dic["L"]
triplet_dic = structure(c("F","F","L","L"),
names = c("UUU","UUC", "UUA", "UUG"))
triplet_dic["UUU"]
triplet_dic["UUC"]
i = triplet_dic["UUC"]
i
nchar(i)
cat(i)
915/3
?substring
x <- "xxyyxyxy"
substring(x, seq(1,nchar(x),2), seq(2,nchar(x),2))
seq(1,nchar(x),3)
?seq
x <- "xxyyxyxyz"
substring(x, seq(1,nchar(x),3), seq(3,nchar(x),3))
?substr()
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/ginny")
create("SeqQuery")
setwd("./SeqQuery")
document()
setwd("..")
install("SeqQuert")
setwd("..")
install("SeqQuery")
getwd()
setwd("/Users/ginny")
install("SeqQuery")
?nuc_query
setwd("Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
setwd("Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
setwd("Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
setwd("/Users/ginny")
install("SeqQuery")
setwd("Users/ginny/SeqQuery")
document()
getwd()
setwd("Users/ginny/SeqQuery")
setwd("Users/ginny/SeqQuery")
setwd("Users/ginny/SeqQuery")
setwd("Users/ginny/SeqQuery")
getwd()
setwd("/Users/ginny/SeqQuery")
document()
library(roxygen2)
setwd("/Users/ginny/SeqQuery")
document()
library(data.table)
setwd("/Users/ginny/SeqQuery")
document()
?document()
library("devtools")
setwd("/Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
library("devtools")
devtools::install_github("ginnyintifa/SeqQuery")
library(SeqQuery)
166*60
167*60
wseq = c(seq(1:22),"X","Y")
wseq
wchr = paste0("chr", wseq)
wchr
?stop
setwd("/Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
library("devtools")
devtools::install_github("ginnyintifa/SeqQuery")
setwd("/Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
?file.rename
sample(seq(1:100),10)
vep_unique_annotation = vep_20 %>%
dplyr::group_by(Location, ID, agg_sample_id) %>%
dplyr::top_n(n = 1, wt = Amino_acids)%>%
set.seed(123)
?barplot
?readLines
2^14
?abline
?text
?abline
?text
?rbind
rbind(1,2,3,4)
?text
?legend
plot(c(0,1), c(0,1), col = 1, type = "l")
plot(c(0,1), c(0,1), col = 2, type = "l")
?rnorm
?matrix
?jitter
get_col = c('#e41a1c80', '#377eb880','#4daf4a80','#984ea380','#ff7f0080','#ffff3380','#a6562880','#f781bf80','#99999980')
plot(x = c(1:9), y = rep(1,9), col = get_col)
plot(x = c(1:9), y = rep(1,9), col = get_col, pch = 16)
?plot
?lines
4/30
2^14
?heatmap.2
??heatmap.2
?abline()
?which
c = c(1,2,1,3,4,NA)
c
which(c>2)
which(c>5)
length(which(c>5))
755*1024/4
755*1024/4/3600
661+9.6*56+1.72*168-4.7*26
1365.36*1.5
2048*0.9
-log10(0.05)
library(dplyr)
library(table.table)
library(magrittr)
scancer = fread("/data/ginny/tcga_pancan/important_files/cancer_type_clinical/SKCM_clinical.tsv",
stringsAsFactors = F)
primary_id = scancer%>%
dplyr::filter(tumor_tissue_site.1 == "Primary Tumor")
cdr = fread("/data/ginny/tcga_pancan/important_files/TCGA_CDR.tsv",
stringsAsFactors = F)
primary_skcm = cdr %>%
dplyr::filter(type == "SKCM")%>%
dplyr::filter(bcr_patient_barcode %in% primary_id$bcr_patient_barcode)
write.table(primary_skcm, "/data/ginny/tcga_pancan/important_files/primary_skcm_cdr.tsv",
quote = F, row.names = F, sep = "\t")
## now use this as the clinical information for SKCM patients
## first mapping of variants somatic and germline to PIUs
### from the result file I will just keep those patients only
somatic_piu = fread("/data/ginny/tcga_pancan/TCGA_all/SKCM_somatic/SKCM_summarise_mutation_201901")
library(dplyr)
library(table.table)
library(magrittr)
scancer = fread("/data/ginny/tcga_pancan/important_files/cancer_type_clinical/SKCM_clinical.tsv",
stringsAsFactors = F)
primary_id = scancer%>%
dplyr::filter(tumor_tissue_site.1 == "Primary Tumor")
cdr = fread("/data/ginny/tcga_pancan/important_files/TCGA_CDR.tsv",
stringsAsFactors = F)
primary_skcm = cdr %>%
dplyr::filter(type == "SKCM")%>%
dplyr::filter(bcr_patient_barcode %in% primary_id$bcr_patient_barcode)
write.table(primary_skcm, "/data/ginny/tcga_pancan/important_files/primary_skcm_cdr.tsv",
quote = F, row.names = F, sep = "\t")
## now use this as the clinical information for SKCM patients
## first mapping of variants somatic and germline to PIUs
### from the result file I will just keep those patients only
somatic_piu = fread("/data/ginny/tcga_pancan/TCGA_all/SKCM_somatic/SKCM_summarise_mutation_201901")
library(dplyr)
library(table.table)
library(magrittr)
2330645/(2330645+1849242)
880/929
369/427
15913/17085
17086-15913
49/929
58/427
1173/17086
10086/18070
51/75
52/74
69/72
log2(1.5)
library(GPD)
univariate_cox_model
setwd("/Users/ginny/Google Drive/R_GPD/GPD_package_0401/GPD")
document()
library("devtools")
library(roxygen2)
setwd("/Users/ginny/Google Drive/R_GPD/GPD_package_0401/GPD")
document()
